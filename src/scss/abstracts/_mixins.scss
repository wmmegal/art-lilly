@mixin media-breakpoint($type) {
    $breakpoints: (
            'xl' : '(max-width: 1375px)',
            'lg' : '(max-width: 1199px)',
            'md' : '(max-width: 767px)',
            'sm' : '(max-width: 575px)',
    );

    @media #{map_get($breakpoints, $type)} {
        @content
    }

}

@mixin flex {
    display: flex;
    align-items: center;
}

@mixin flex-inline {
    @include flex;
    justify-content: space-between;
}

@mixin pseudo {
    content: '';
    position: absolute;
}

@mixin hidden {
    opacity: 0;
    visibility: hidden;
    transition: 0.3s opacity ease;
}

@mixin visible {
    opacity: 1;
    visibility: visible;
}

@mixin center-xy {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@mixin center-y {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
}

@mixin center-x {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

@mixin all-space {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

@mixin circle($width, $color) {
    width: $width * 1px;
    height: $width * 1px;
    border-radius: $width/2 * 1px;
    background: $color;
}

@mixin text-ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Vendor prefixes
$sass-burger-add-vendor-prefixes: true !default;

// Burger
@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
    $burger-height: $height !global;
    $burger-gutter: $gutter !global;

    position: relative;
    margin-top: $height + $gutter;
    margin-bottom: $height + $gutter;

    @if $sass-burger-add-vendor-prefixes {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
    }
    user-select: none;

    &, &:before, &:after {
        display: block;
        width: $width;
        height: $height;
        background-color: $color;
        @if $border-radius != 0 {
            border-radius: $border-radius;
        }

        @if $sass-burger-add-vendor-prefixes {
            -webkit-transition-property: background-color, -webkit-transform;
            -moz-transition-property: background-color, -moz-transform;
            -o-transition-property: background-color, -o-transform;
        }
        transition-property: background-color, transform;

        @if $sass-burger-add-vendor-prefixes {
            -webkit-transition-duration: $transition-duration;
            -moz-transition-duration: $transition-duration;
            -o-transition-duration: $transition-duration;
        }
        transition-duration: $transition-duration;
    }

    &:before, &:after {
        position: absolute;
        content: "";
    }

    &:before {
        top: -($height + $gutter);
    }

    &:after {
        top: $height + $gutter;
    }
}


// Select parts of the burger
@mixin burger-parts {
    &, &:before, &:after {
        @content;
    }
}

@mixin burger-top {
    &:before {
        @content;
    }
}

@mixin burger-middle {
    & {
        @content;
    }
}

@mixin burger-bottom {
    &:after {
        @content;
    }
}


// Burger animations
@mixin burger-to-cross {
    & {
        background-color: transparent;
    }
    &:before {
        @if $sass-burger-add-vendor-prefixes {
            -webkit-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -moz-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -ms-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -o-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
        }
        transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    }
    &:after {
        @if $sass-burger-add-vendor-prefixes {
            -webkit-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -moz-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -ms-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -o-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
        }
        transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    }
}


@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}


@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}


@mixin checkbox {
    display: block;
    font-size: 0;

    input {
        display: none;
    }

    span {
        display: inline-block;
        position: relative;
        padding-left: 2rem;
        color: #556181;
        font-size: 0.875rem;
        cursor: pointer;
        line-height: 1.5rem;

        a {
            text-decoration: none;
            color: $blue;

            &:hover {
                text-decoration: underline;
            }
        }
    }

    input + span {

        &:before {
            @include pseudo;
            top: 0;
            left: 0;
            width: 1.5rem;
            height: 1.5rem;
            border-radius: 0.25rem;
            border: 0.063rem solid #ebf2fb;
            background-color: #ffffff;
        }

    }

    input:checked + span {
        &:before {
            border-color: $blue;
        }

        &:after {
            @include pseudo;
            top: 6px;
            left: 6px;
            width: 0.75rem;
            height: 0.75rem;
            border-radius: 0.125rem;
            background: $blue;
        }
    }

    &:last-child {
        margin-bottom: 0;
    }
}
